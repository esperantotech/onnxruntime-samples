include:
  - project: 'esperantotech/software/gitlab-ci-common'
    ref: 9e27d5abc3e4538cf5ee705d0263ea3d415e6ef1
    file:
      - rules/generic-workflow-conan.yaml
      - pods/nano-pod.yaml
      - pods/large-pod.yaml
      - jobs/generic-k8s-job.yaml
      - jobs/conan-sonarqube-job.yaml
      - rules/exec_maybe_interactively.yaml
  - project: 'esperantotech/software/gitlab-ci-common'
    ref: master
    file:
      - 'jobs/conan-jobs.yaml'

stages:
  - smoke
  - codequality
  - test
  
default:
  interruptible: true

variables:
  ET_SW_DEVELOP_DOCKER_IMAGE:
    value: docker-sw-team.sc-artifactory1.esperanto.ai/convoke/ubuntu-22.04-et-sw-develop-stack:1.6.46
  ET_SDK_HOME:
    value: '/usr/local/esperanto'
  CMAKE_TOOLCHAIN_FILE:
    value: '${ET_SDK_HOME}/.builds/host/conan_toolchain.cmake'
  PYTEST_OPTIONS:
    description: Common pytest options
    value: --log-cli-level=INFO --tb=short --quiet --basetemp=$CI_JOB_ID.tmp --junitxml=$CI_JOB_ID.xml --durations=0

# Only run job in these cases:
# - if there is a MR open
.development:
  rules:
    - &development_rule
      if: ($CI_PIPELINE_SOURCE == "merge_request_event") && ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH)

# Only run job in these cases:
# - if it's a tag pipeline
# - if it's a nightly pipeline
# - if there is a commit pushed or merged to the default branch (pre-release)
# - if there is a MR open (pre-release, unstable)
.release_or_development:
  rules:
    - if: $CI_COMMIT_TAG
      allow_failure: true
      variables:
        PYTEST_MARKER_LONG: ""
        TIMEOUT: 6h
    - if: $CI_PIPELINE_SOURCE == "schedule"
      allow_failure: false
      variables:
        PYTEST_MARKER_LONG: ""
        TIMEOUT: 6h
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_PIPELINE_SOURCE == "merge_request_event"
      allow_failure: false
      variables:
        PYTEST_MARKER_LONG: "and not long"
        TIMEOUT: 2h

clang-format:
  extends:
    - .template_job
    - .pod_nano
  image: '${ET_SW_DEVELOP_DOCKER_IMAGE}'
  stage: smoke
  rules:
    - !reference [.development, rules]
  variables:
    CMD_SCRIPT: |
      source ${ET_SDK_HOME}/.builds/host/conanrun.sh
      git fetch origin $CI_DEFAULT_BRANCH
      git clang-format --diff origin/$CI_DEFAULT_BRANCH -- * | grep -e "clang-format did not modify any files$" -e "^no modified files to format$"

build:sonarqube-check:
  extends:
    - .template_sonarqube_conan_job
    - .pod_large
  stage: codequality
  image: '${ET_SW_DEVELOP_DOCKER_IMAGE}'
  needs: []
  rules:
    - !reference [.release_or_development, rules]
  script:
    - cmake -S models/image-classifier/c++ -B .ci/sonarqube/build -DCMAKE_TOOLCHAIN_FILE=${ET_SDK_HOME}/.builds/host/conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -G Ninja
    - cp ${CI_PROJECT_DIR}/.ci/sonarqube/build/compile_commands.json .
    - sonar-scanner -Dsonar.cfamily.threads=${KUBERNETES_CPU_REQUEST}
    
###############################################################################
###############################################################################
###############################################################################

.tests:silicon:common:
  extends:
    - .template_job
  image:
    name: ${ET_SW_DEVELOP_DOCKER_IMAGE}
    entrypoint: [""]
  tags:
    - silicon
    - 1-card-silicon
    - mv-gb-swci01
  rules:
    - !reference [.release_or_development, rules]
  variables:
    GLOG_minloglevel: 2 # Reduce Glow & Neuralizer verbosity
    CMD_SETUP_EXTRA_DEPS: |
      # Download models
      sudo apt-get update
      sudo apt-get install -y ffmpeg libsm6 libxext6 --no-install-recommends
      sudo apt-get install -y git-lfs
      git lfs update --force
      python3 -m pip install -r requirements.txt --extra-index-url https://sc-artifactory1.esperanto.ai/artifactory/api/pypi/pypi-virtual/simple
      python3 -m pip install opencv-python-headless~=4.10.0.84
      artifacts_mgr_client --inputfile artifacts/models.yaml --artifactpath ${CI_PROJECT_DIR}/DownloadArtifactory
  artifacts:
    when: always
    expire_in: 2d
    paths:
      - tests/

tests:image-classification:cxx:
  extends:
    - .pod_large
    - .tests:silicon:common
  stage: test
  variables:
    CMD_SCRIPT: |
      source ${ET_SDK_HOME}/.builds/host/conanrun.sh
      pytest .et/test_onnxruntime_samples.py --verbose -m "cxx and ic $PYTEST_MARKER_LONG"

tests:image-classification:python:
  extends:
    - .pod_large
    - .tests:silicon:common
  stage: test
  variables:
    CMD_SCRIPT: |
      source ${ET_SDK_HOME}/.builds/host/conanrun.sh
      pytest .et/test_onnxruntime_samples.py --verbose -m "python and ic $PYTEST_MARKER_LONG"

tests:language-models:python:
  extends:
    - .pod_large
    - .tests:silicon:common
  stage: test
  parallel:
    matrix:
      - PYTEST_FILTER:
          - "bert"
          - "llama3"
          - "mistral"
          - "vicuna"
          - "llava"
          - "whisper"
  variables:
    CMD_SCRIPT: |
      source ${ET_SDK_HOME}/.builds/host/conanrun.sh
      pytest .et/test_onnxruntime_samples.py --verbose -m "python and lm $PYTEST_MARKER_LONG" -k $PYTEST_FILTER

tests:t2i:python:
  extends:
    - .pod_large
    - .tests:silicon:common
  stage: test
  variables:
    CMD_SCRIPT: |
      source ${ET_SDK_HOME}/.builds/host/conanrun.sh
      pytest .et/test_onnxruntime_samples.py --verbose -m "python and t2i $PYTEST_MARKER_LONG"
