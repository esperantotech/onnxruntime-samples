include:
  - project: 'esperantotech/software/gitlab-ci-common'
    ref: 29216b3692cae887c2543c5b43c5b91e09370b7d
    file:
      - rules/generic-workflow-conan.yaml
      - pods/nano-pod.yaml
      - pods/large-pod.yaml
      - jobs/generic-k8s-job.yaml
      - jobs/conan-sonarqube-job.yaml
      - rules/exec_maybe_interactively.yaml
  - project: 'esperantotech/software/gitlab-ci-common'
    ref: master
    file:
      - 'jobs/conan-jobs.yaml'

stages:
  - smoke
  - codequality
  - test
  
default:
  interruptible: true

variables:
  ET_SW_DEVELOP_DOCKER_IMAGE:
    value: docker-sw-team.sc-artifactory1.esperanto.ai/convoke/ubuntu-22.04-et-sw-develop-stack:1.6.10
  ET_SDK_HOME:
    value: '/usr/local/esperanto'
  CMAKE_TOOLCHAIN_FILE:
    value: '${ET_SDK_HOME}/.builds/host/conan_toolchain.cmake'
  PYTEST_OPTIONS:
    description: Common pytest options
    value: --log-cli-level=INFO --tb=short --quiet --basetemp=$CI_JOB_ID.tmp --junitxml=$CI_JOB_ID.xml --durations=0

# Only run job in these cases:
# - if there is a MR open
.development_job:
  rules:
    - &development_job_rule
      if: ($CI_PIPELINE_SOURCE == "merge_request_event") && ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH)

clang-format:
  extends:
    - .template_job
    - .pod_nano
  image: '${ET_SW_DEVELOP_DOCKER_IMAGE}'
  stage: smoke
  rules:
    - *development_job_rule
  variables:
    CMD_SCRIPT: |
      source ${ET_SDK_HOME}/.builds/host/conanrun.sh
      git fetch origin $CI_DEFAULT_BRANCH
      git clang-format --diff origin/$CI_DEFAULT_BRANCH -- * | grep -e "clang-format did not modify any files$" -e "^no modified files to format$"

build:sonarqube-check:
  extends:
    - .template_sonarqube_conan_job
    - .pod_large
  stage: codequality
  image: '${ET_SW_DEVELOP_DOCKER_IMAGE}'
  needs: []
  rules:
    - if: ($CI_PIPELINE_SOURCE == "merge_request_event") && ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH)
      allow_failure: false # TODO: change to 'false' once analysis are verified correct & stable
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      allow_failure: true
    - if: $CI_COMMIT_TAG
      allow_failure: true
  script:
    - cmake -S models/image-classifier/c++ -B .ci/sonarqube/build -DCMAKE_TOOLCHAIN_FILE=/usr/local/esperanto/.builds/host/conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release -G "Unix Makefiles"
    - build-wrapper-linux-x86-64 --out-dir build_wrapper_output_directory make -C .ci/sonarqube/build clean all
    - sonar-scanner
    
###############################################################################
###############################################################################
###############################################################################

.tests:image-classification:
  extends:
    - .pod_large
    - .template_job
  stage: test
  rules:
    - *development_job_rule
  variables:
    TEMP_DIR: temp
    TIMEOUT: 60m
    GLOG_minloglevel: 2 # Reduce Glow & Neuralizer verbosity
    CXX_SOURCE_PATH: models/image-classifier/c++
    CXX_BUILD_PATH: models/image-classifier/c++/build
    CMD_SETUP_EXTRA_DEPS: |
      # Download models
      if [ $API_TYPE == "C++" ]; then
        sudo apt-get install -y ffmpeg libsm6 libxext6 --no-install-recommends
      fi
      python3 -m pip install -r requirements.txt --extra-index-url https://sc-artifactory1.esperanto.ai/artifactory/api/pypi/pypi-virtual/simple
      artifacts_mgr_client --inputfile artifacts/models.yaml --artifactpath ${CI_PROJECT_DIR}/DownloadArtifactory

    CMD_BUILD: | 
      if [ $API_TYPE == "C++" ]; then
        cmake -S ${CXX_SOURCE_PATH} -B ${CXX_BUILD_PATH} -DCMAKE_TOOLCHAIN_FILE="${ET_SDK_HOME}/.builds/host/conan_toolchain.cmake" -DCMAKE_BUILD_TYPE=Release -G Ninja
        cmake --build ${CXX_BUILD_PATH}
      fi

    CMD_SCRIPT: |
      source ${ET_SDK_HOME}/.builds/host/conanrun.sh

      if [ $API_TYPE == "C++" ]; then
        ./${CXX_BUILD_PATH}/mnist  -a ${CI_PROJECT_DIR}/DownloadArtifactory -mf ${CXX_SOURCE_PATH}/model-mnist-desc.json -v
      else
        # image-classifier
        python3 models/image-classifier/python/mnist.py --artifacts DownloadArtifactory
        python3 models/image-classifier/python/resnet50.py --artifacts DownloadArtifactory
        python3 models/image-classifier/python/mobilenet.py --artifacts DownloadArtifactory
        python3 models/image-classifier/python/vgg16.py --artifacts DownloadArtifactory
      fi

.tests:language-model:
  extends:
    - .pod_large
    - .template_job
  stage: test
  rules:
    - *development_job_rule
  variables:
    TEMP_DIR: temp
    TIMEOUT: 110m
    GLOG_minloglevel: 2 # Reduce Glow & Neuralizer verbosity
    CXX_SOURCE_PATH: models/language-model/c++
    CXX_BUILD_PATH: models/language-model/c++/build
    CMD_SETUP_EXTRA_DEPS: |
      # Download models
      sudo apt-get update --fix-missing
      sudo apt-get install -y libsm6 libxext6 --no-install-recommends
      if [ $API_TYPE == "C++" ]; then
        sudo apt-get install -y ffmpeg --no-install-recommends
      fi

      python3 -m pip install -r requirements.txt --extra-index-url https://sc-artifactory1.esperanto.ai/artifactory/api/pypi/pypi-virtual/simple
      artifacts_mgr_client --inputfile artifacts/models.yaml --artifactpath ${CI_PROJECT_DIR}/DownloadArtifactory

      # Generate squad datasets
      artifacts/squad-dataset-to-input-tensor.py --model bert --seq-length 128 --batch-size 1 --output-dir ${CI_PROJECT_DIR}/DownloadArtifactory/input_tensors/bert_squad_128 --file ${CI_PROJECT_DIR}/DownloadArtifactory/datasets/squadV1.1/data/squad-v1.1-dev.json
      artifacts/squad-dataset-to-input-tensor.py --model albert --seq-length 128 --batch-size 1 --output-dir ${CI_PROJECT_DIR}/DownloadArtifactory/input_tensors/albert_squad_128 --file ${CI_PROJECT_DIR}/DownloadArtifactory/datasets/squadV1.1/data/squad-v1.1-dev.json
      artifacts/squad-dataset-to-input-tensor.py --model distilbert --seq-length 128 --batch-size 1 --output-dir ${CI_PROJECT_DIR}/DownloadArtifactory/input_tensors/distilbert_squad_128 --file ${CI_PROJECT_DIR}/DownloadArtifactory/datasets/squadV1.1/data/squad-v1.1-dev.json

    CMD_BUILD: | 
      if [ $API_TYPE == "C++" ]; then
        cmake -S ${CXX_SOURCE_PATH} -B ${CXX_BUILD_PATH} -DCMAKE_TOOLCHAIN_FILE="${ET_SDK_HOME}/.builds/host/conan_toolchain.cmake" -DCMAKE_BUILD_TYPE=Release -G Ninja
        cmake --build ${CXX_BUILD_PATH}
      fi

    CMD_SCRIPT: |
      source ${ET_SDK_HOME}/.builds/host/conanrun.sh

      if [ $API_TYPE == "python" ]; then
        # bert
        python3 models/language-model/python/bert.py -b bert -a DownloadArtifactory
        
        python3 models/language-model/python/bert.py -b albert -a DownloadArtifactory
        python3 models/language-model/python/bert.py -b bert-large -a DownloadArtifactory
        python3 models/language-model/python/bert.py -b distilbert -a DownloadArtifactory

        # llama3
        python3 models/language-model/python/llm-kvc.py -m ${CI_PROJECT_DIR}/DownloadArtifactory/models/llama3-8b-instruct-kvc-int4/model.onnx -t ${CI_PROJECT_DIR}/DownloadArtifactory/tokenizer/llama3 -g 10
        python3 models/language-model/python/llm-kvc.py -m ${CI_PROJECT_DIR}/DownloadArtifactory/models/llama3-8b-instruct-kvc-fp16/model.onnx -t ${CI_PROJECT_DIR}/DownloadArtifactory/tokenizer/llama3 -g 10
        
        # vicuna 1.5b
        python3 models/language-model/python/llm-kvc.py -m ${CI_PROJECT_DIR}/DownloadArtifactory/models/vicuna-1.5-7b-kvc-int4/model.onnx -t ${CI_PROJECT_DIR}/DownloadArtifactory/tokenizer/vicuna -g 10

        # mistral 7b
        python3 models/language-model/python/llm-kvc.py -m ${CI_PROJECT_DIR}/DownloadArtifactory/models/mistral-instruct-7b-kvc-fp16/model.onnx -t ${CI_PROJECT_DIR}/DownloadArtifactory/tokenizer/mistral -g 10

        # llava
        python3 models/language-model/python/llava.py -a DownloadArtifactory -i artifacts/doge.jpg

      fi


tests:image-classification:python:sw-sysemu:
  extends:
    - .tests:image-classification
  image:
    name: ${ET_SW_DEVELOP_DOCKER_IMAGE}
  variables:
    DEVICE_TYPE: sysemu   
    ORT_ETGLOW_DEVICE_TYPE: sysemu
    API_TYPE: python
    TIMEOUT: 90m

tests:image-classification:python:silicon:
  extends:
    - .tests:image-classification
  image:
    name: ${ET_SW_DEVELOP_DOCKER_IMAGE}
    entrypoint: [""]
  variables:
    DEVICE_TYPE: silicon
    ORT_ETGLOW_DEVICE_TYPE: silicon
    API_TYPE: python
  tags:
    - silicon
    - 1-card-silicon
    - mv-gb-swci01

tests:image-classification:c++:sw-sysemu:
  extends:
    - .tests:image-classification
  image:
    name: ${ET_SW_DEVELOP_DOCKER_IMAGE}
  variables:
    DEVICE_TYPE: sysemu
    ORT_ETGLOW_DEVICE_TYPE: sysemu
    API_TYPE: C++
  
tests:image-classification:c++:silicon:
  extends:
    - .tests:image-classification
  image:
    name: ${ET_SW_DEVELOP_DOCKER_IMAGE}
    entrypoint: [""]
  variables:
    DEVICE_TYPE: silicon
    ORT_ETGLOW_DEVICE_TYPE: silicon    
    API_TYPE: C++
  tags:
    - silicon
    - 1-card-silicon
    - mv-gb-swci01

tests:language-model:python:silicon:
  extends:
    - .tests:language-model
  image:
    name: ${ET_SW_DEVELOP_DOCKER_IMAGE}
    entrypoint: [""]
  variables:
    DEVICE_TYPE: silicon
    ORT_ETGLOW_DEVICE_TYPE: silicon
    API_TYPE: python
  tags:
    - silicon
    - 1-card-silicon
    - mv-gb-swci01